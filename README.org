#+AUTHOR: Anthony Kalaitzis
#+TITLE: numFort

* Description
numFort is a numerical library for fortran that includes quadpack and lapack source code and integrates common matlab and plotting functionality through python code.

* Installation
1. Before using numFort, make sure to download the ifort compiler and the necessary math kernel libraries for the use of LAPACK. These may be downloaded from the following link (free for students) [[https://software.intel.com/en-us/qualify-for-free-software/student][Parallel studio XE]], click the C++ link unless on mac.
2. Move repository files to specified location eg. /home/username/bin
3. edit the following variables in the example make files.

#+BEGIN_SRC 
# Path to pre-compiled object files
MYLIBS = -I/home/username/bin
DIR = /home/username/bin
#+END_SRC

4. The bash file /recompile.sh/ in the repository can be used to recompile these libraries. Simply run with ./recompile.sh whilst in the directory. Alternatively one may run the following command in the terminal.

#+BEGIN_SRC shell
  (cd /home/username/bin; ./recompile.sh)
#+END_SRC

5. Include your own module files under the variable *OBJS*. Bonza, you should be ready to go.

* Documentation
The three modules you may include are /kinds/, /numFort/ and /pyplots/. Simply include in any .f90 file via a simple use statement as per usual. Below we will give short descriptions of the module files and the subroutines and functions contained inside.

Make sure to search for these functions inside numFort to see their parameters. A brief description of their parameters are listed below for _ALL_ possible routine variants.

** Kinds
Precision parameter file. Main uses are for constants like pi and making variables double precision.

** NumFort

*** Factorial
Calculates the factorial of n

|-----------+---------------------|
| Variable  | Description         |
|-----------+---------------------|
| n         | integer             |
|-----------+---------------------|
| factorial | outputted factorial |
|-----------+---------------------|

*** Meshgrid
Creates a unique lattice of points for two given vectors x and y. Usually used for making a 3D grid for 3 dimensional plots.

|----------+---------------------------------------|
| Variable | Description                           |
|----------+---------------------------------------|
| x        | double precision vector               |
| y        | double precision vector               |
|----------+---------------------------------------|
| XX       | matrix of dimension (size(y),size(x)) |
| YY       | matrix of dimension (size(y),size(x)) |
|----------+---------------------------------------|


*** Splinefit
Fits a cubic spline to inputted data. This function can return the coefficients or just a list of desired points to be interpolated at.

|----------+------------------------------------------|
| Variable | Description                              |
|----------+------------------------------------------|
| x        | double precision vector                  |
| y        | double precision vector                  |
| xj       | this is the vector x for calculation use |
| intpts   | points to interpolate at (vector)        |
|----------+------------------------------------------|
| intvals  | outputted interpolant values             |
| c        | coefficients for spline fit              |
|----------+------------------------------------------|

*** PolyFit
Exactly the same as SplineFit but for a Nth order polynomial.

|----------+----------------------------------|
| Variable | Description                      |
|----------+----------------------------------|
| N        | integer, order of polynomial     |
| x        | double precision vector          |
| y        | double precision vector          |
|----------+----------------------------------|
| c        | coefficient of fit               |
| x        | value to calculate polynomial at |
|----------+----------------------------------|

*** rk4
Performs a 4th order Runge Kutta solving algorithm for a given DE. Algorithms giving for a single DE or 2 coupled DE. May have this method go over a range of points or just a single step.

|----------+----------------------------------------|
| Variable | Description                            |
|----------+----------------------------------------|
| t0       | initial value to start stepping at     |
| tN       | final value to step to                 |
| y0       | initial y value                        |
| N        | total number of points to step through |
| f        | input function                         |
| h        | step size                              |
|----------+----------------------------------------|
| x        | value to calculate polynomial at       |
| t        | outputted x values                     |
| y        | outputted y values                     |
|----------+----------------------------------------|

*** GuessZero
Given a set of values or a function with boundaries, returns the approximate value of where the function changes sign. An index is returned for inputted values method and the x value exactly is returned for the function method.

|-----------+---------------------------------|
| Variable  | Description                     |
|-----------+---------------------------------|
| f         | input function                  |
| fvals     | list of y values for a function |
| a,b       | range for zero guess            |
|-----------+---------------------------------|
| GuessZero | integer index of zero location  |
|-----------+---------------------------------|

*** Newton1D
Performs a 1 dimensional newtons method to find the zero of a function.

|----------+---------------------------------------|
| Variable | Description                           |
|----------+---------------------------------------|
| fn       | Input function                        |
| guess    | initial guess of zero of the function |
|----------+---------------------------------------|
| newton1D | zero of function guess location       |
|----------+---------------------------------------|

*** Linspace
Creates a linear space of points between a and b with N points.

|----------+----------------------------------|
| Variable | Description                      |
|----------+----------------------------------|
| start    | left bound                       |
| finish   | right bound                      |
| N        | number of points, integer        |
|----------+----------------------------------|
| linspace | vector of points between a and b |
|----------+----------------------------------|

*** Deriv
Numerically calculates the derivative via a centred finite difference method.

|----------+-------------------------------|
| Variable | Description                   |
|----------+-------------------------------|
| f        | Input function                |
| x0       | value to calculate            |
|----------+-------------------------------|
| deriv    | value of numerical derivative |
|----------+-------------------------------|

*** integral
Numerically calculates an integral given a function and bounds. Using Gaussin quadrature.

|----------+-----------------------------|
| Variable | Description                 |
|----------+-----------------------------|
| f        | Input function              |
| a        | left bound                  |
| b        | right bound                 |
| absErr   | absolute error              |
| relErr   | relative error              |
|----------+-----------------------------|
| integral | numerical value of integral |
|----------+-----------------------------|

** Pyplots
Using the python code /pyplots.py/ (make sure this file is copied into the directory you are running from), produces a plot given various inputs specified in the subroutine. Inputs may be multidimensional arrays with the x values in the 1,3,5,.. columns and the y values in 2,4,6,... Alternatively one may simply enter two vectors x,y and use these.

|----------+---------------------------------------------|
| Variable | Description                                 |
|----------+---------------------------------------------|
| x        | matrix of values or vector                  |
| y        | vector of values                            |
| xaxis    | x axis label                                |
| yaxis    | y axis label                                |
| legend   | legend of inputed data (for multiple plots) |
|----------+---------------------------------------------|

